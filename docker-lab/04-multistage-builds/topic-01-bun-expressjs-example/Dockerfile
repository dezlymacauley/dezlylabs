# SECTION: Build Stage

# This stage is to install project dependencies and run build commands. 

# Download this image from Docker Hub, or the local Docker image cache
# on the computer that is running this command.
FROM oven/bun:1.2.2-alpine AS build

# This will set the root directory of a container that is built from this
# image to `/app/`
WORKDIR /app/

# Copy only JavaScript files needed to install the project dependencies
# because these files are usually not meant to change.

# Copy package.json from this directory to the WORKDIR of the container.
# When a container is built, this file will be found in /app/package.json
COPY ./package.json ./

# Same concept here
COPY ./bun.lock ./

# Install the project dependencies and prevent any changes to `bun.lock` 
# --production will avoid installing any dev dependencies.
RUN bun install  --production --frozen-lockfile 

#______________________________________________________________________________
# SECTION: Production Stage

# This stage is where the application will be run.

# A distroless image only includes the bare minimun of a program needed
# for running it.

# This distroless image only includes the Bun version 1.2.2 runtime.
# There is no Linux distro, so no interactive shell like bash or sh,
# and no core linux utils.
# Also the Bun's package manager and compiler are not included.
FROM oven/bun:1.2.2-distroless

WORKDIR /app/

# Copy the Node modules directory generated by the `build` stage above,
# into the working directory `/app/`. 
# So the end result will be `/app/node_modules/`
COPY --from=build /app/node_modules ./node_modules/

# When a container is built, this src/ directory will 
# be found in /app/src/ of the docker container.
COPY ./src/ ./src/

# An environment variable called PORT is declared and set to 3000
ENV PORT=3000

CMD [ "bun", "src/main.ts"]
